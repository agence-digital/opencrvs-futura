{
    "sourceFile": "src/utils/address-utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1713975016323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713975031016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1114,12 +1114,10 @@\n   section: string,\n   addressCase: AddressCases,\n   conditionalCase?: string\n ): SerializedFormField[] {\n-  const defaultFields: SerializedFormField[] = getAddressFields(\n-    section,\n-    addressCase\n-  )\n+  const defaultFields: SerializedFormField[] =\n+    getAddressMariageParentInBirthFields(section, addressCase)\n   if (conditionalCase) {\n     defaultFields.forEach((field) => {\n       let conditional\n       if (conditionalCase) {\n"
                },
                {
                    "date": 1713975045375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   IHandlebarTemplates\n } from '../form/types/types'\n import {\n   getAddressFields,\n+  getAddressMariageParentInBirthFields,\n   getXAddressSameAsY\n } from '../form/addresses/address-fields'\n import { getPreviewGroups } from '../form/common/preview-groups'\n import { cloneDeep } from 'lodash'\n@@ -1109,9 +1110,9 @@\n   }\n   return defaultFields\n }\n \n-function getAddressMariageOfParent(\n+export function getAddressMariageOfParent(\n   section: string,\n   addressCase: AddressCases,\n   conditionalCase?: string\n ): SerializedFormField[] {\n"
                },
                {
                    "date": 1713976850158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1113,9 +1113,10 @@\n \n export function getAddressMariageOfParent(\n   section: string,\n   addressCase: AddressCases,\n-  conditionalCase?: string\n+  conditionalCase?: string,\n+  previewGroup?: string\n ): SerializedFormField[] {\n   const defaultFields: SerializedFormField[] =\n     getAddressMariageParentInBirthFields(section, addressCase)\n   if (conditionalCase) {\n@@ -1137,8 +1138,9 @@\n         field.conditionals.push(conditional)\n       } else if (conditional && !field.conditionals) {\n         field.conditionals = [conditional]\n       }\n+      if (previewGroup) field.previewGroup = previewGroup\n     })\n   }\n   return defaultFields\n }\n"
                },
                {
                    "date": 1713977114943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1118,9 +1118,9 @@\n   previewGroup?: string\n ): SerializedFormField[] {\n   const defaultFields: SerializedFormField[] =\n     getAddressMariageParentInBirthFields(section, addressCase)\n-  if (conditionalCase) {\n+  \n     defaultFields.forEach((field) => {\n       let conditional\n       if (conditionalCase) {\n         conditional = {\n@@ -1138,9 +1138,10 @@\n         field.conditionals.push(conditional)\n       } else if (conditional && !field.conditionals) {\n         field.conditionals = [conditional]\n       }\n+\n       if (previewGroup) field.previewGroup = previewGroup\n     })\n-  }\n+  \n   return defaultFields\n }\n"
                },
                {
                    "date": 1713977133159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1119,29 +1119,31 @@\n ): SerializedFormField[] {\n   const defaultFields: SerializedFormField[] =\n     getAddressMariageParentInBirthFields(section, addressCase)\n \n-  defaultFields.forEach((field) => {\n-    let conditional\n-    if (conditionalCase) {\n-      conditional = {\n-        action: 'hide',\n-        expression: `${conditionalCase}`\n+  if(conditionalCase || previewGroup) {\n+    defaultFields.forEach((field) => {\n+      let conditional\n+      if (conditionalCase) {\n+        conditional = {\n+          action: 'hide',\n+          expression: `${conditionalCase}`\n+        }\n       }\n-    }\n-    if (\n-      conditional &&\n-      field.conditionals &&\n-      field.conditionals.filter(\n-        (conditional) => conditional.expression === conditionalCase\n-      ).length === 0\n-    ) {\n-      field.conditionals.push(conditional)\n-    } else if (conditional && !field.conditionals) {\n-      field.conditionals = [conditional]\n-    }\n+      if (\n+        conditional &&\n+        field.conditionals &&\n+        field.conditionals.filter(\n+          (conditional) => conditional.expression === conditionalCase\n+        ).length === 0\n+      ) {\n+        field.conditionals.push(conditional)\n+      } else if (conditional && !field.conditionals) {\n+        field.conditionals = [conditional]\n+      }\n+  \n+      if (previewGroup) field.previewGroup = previewGroup\n+    })\n+  }\n \n-    if (previewGroup) field.previewGroup = previewGroup\n-  })\n-\n   return defaultFields\n }\n"
                },
                {
                    "date": 1713977202115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1139,9 +1139,8 @@\n         field.conditionals.push(conditional)\n       } else if (conditional && !field.conditionals) {\n         field.conditionals = [conditional]\n       }\n-\n       if (previewGroup) field.previewGroup = previewGroup\n     })\n   }\n \n"
                }
            ],
            "date": 1713975016323,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.\n */\n\nimport { MessageDescriptor } from 'react-intl'\nimport { ADMIN_LEVELS, defaultAddressConfiguration } from '../form/addresses'\nimport {\n  ISerializedForm,\n  SerializedFormField,\n  Event,\n  Conditional,\n  IPreviewGroup,\n  EventLocationAddressCases,\n  AddressCases,\n  AllowedAddressConfigurations,\n  AddressSubsections,\n  AddressCopyConfigCases,\n  IAddressConfiguration,\n  IFormFieldMapping,\n  IQueryMapper,\n  IMutationMapper,\n  IHandlebarTemplates\n} from '../form/types/types'\nimport {\n  getAddressFields,\n  getXAddressSameAsY\n} from '../form/addresses/address-fields'\nimport { getPreviewGroups } from '../form/common/preview-groups'\nimport { cloneDeep } from 'lodash'\n\n// Use this function to edit the visibility of fields depending on user input\nfunction getLocationLevelConditionals(\n  section: string,\n  useCase: string,\n  defaultConditionals: Conditional[]\n) {\n  let customConditionals: Conditional[] = []\n  switch (ADMIN_LEVELS) {\n    case 1:\n      customConditionals = [\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        }\n      ]\n      break\n    case 2:\n      customConditionals = [\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        }\n      ]\n      break\n    case 3:\n      customConditionals = [\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        }\n      ]\n      break\n    case 4:\n      customConditionals = [\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel4${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        }\n      ]\n      break\n  }\n  return defaultConditionals.concat(customConditionals)\n}\n\n// Use this function to edit the visibility of fields depending on user input\nexport function getPlaceOfEventConditionals(\n  section: string,\n  location: string,\n  useCase: string\n) {\n  switch (location) {\n    case 'country':\n      return [\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        }\n      ]\n    case 'state':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'district':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel3':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel4':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel5':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel4${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'configurableAddressLines':\n      return getLocationLevelConditionals(section, useCase, [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ])\n    case 'international':\n      return [\n        {\n          action: 'hide',\n          expression: `isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        },\n        {\n          action: 'hide',\n          expression:\n            useCase !== EventLocationAddressCases.PLACE_OF_MARRIAGE\n              ? `values.${useCase}!=\"OTHER\" && values.${useCase}!=\"PRIVATE_HOME\"`\n              : ''\n        }\n      ]\n    default:\n      throw Error(\n        'Supplied event location is unsupported by current conditionals'\n      )\n  }\n}\n\n// Use this function to edit the visibility of fields depending on user input\nexport function getAddressConditionals(\n  section: string,\n  location: string,\n  useCase: string\n) {\n  switch (location) {\n    case 'country':\n      return [\n        {\n          action: 'disable',\n          expression: `values?.fieldsModifiedByNidUserInfo?.includes('country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}')`\n        }\n      ]\n    case 'state':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'district':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel3':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel4':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'locationLevel5':\n      return [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.state${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.district${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel3${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression: `!values.locationLevel4${sentenceCase(\n            useCase\n          )}${sentenceCase(section)}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    case 'configurableAddressLines':\n      return getLocationLevelConditionals(section, useCase, [\n        {\n          action: 'hide',\n          expression: `!values.country${sentenceCase(useCase)}${sentenceCase(\n            section\n          )}`\n        },\n        {\n          action: 'hide',\n          expression: `!isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ])\n    case 'international':\n      return [\n        {\n          action: 'hide',\n          expression: `isDefaultCountry(values.country${sentenceCase(\n            useCase\n          )}${sentenceCase(section)})`\n        }\n      ]\n    default:\n      throw Error('Supplied location is unsupported by current conditionals')\n  }\n}\n\n// ====== THE FOLLOWING UTILITY FUNCTIONS SHOULD NOT BE EDITED DURING COUNTRY CONFIGURATION! ========\n// ====================== IF YOU BELIEVE THERE IS A BUG HERE, RAISE IN GITHUB! ======================\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport const sentenceCase = (str: string): string =>\n  str.replace(/\\w\\S*/g, (txt: string) => {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getDependency(\n  location: string,\n  useCase: string,\n  section: string\n) {\n  switch (location) {\n    case 'state':\n      return `country${sentenceCase(useCase)}${sentenceCase(section)}`\n    case 'district':\n      return `state${sentenceCase(useCase)}${sentenceCase(section)}`\n    case 'locationLevel3':\n      return `district${sentenceCase(useCase)}${sentenceCase(section)}`\n    case 'locationLevel4':\n      return `locationLevel3${sentenceCase(useCase)}${sentenceCase(section)}`\n    case 'locationLevel5':\n      return `locationLevel4${sentenceCase(useCase)}${sentenceCase(section)}`\n    default:\n      throw Error('Supplied address dependency is unsupported')\n  }\n}\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nfunction getTemplateMapping(\n  location: string,\n  useCase: string,\n  fieldName: string,\n  fhirLineArrayPosition?: number\n): IHandlebarTemplates {\n  return isUseCaseForPlaceOfEvent(useCase)\n    ? fhirLineArrayPosition\n      ? {\n          fieldName,\n          operation: 'eventLocationAddressLineTemplateTransformer',\n          parameters: [fhirLineArrayPosition, fieldName, location]\n        }\n      : {\n          fieldName,\n          operation: 'eventLocationAddressFHIRPropertyTemplateTransformer',\n          parameters: [location]\n        }\n    : fhirLineArrayPosition\n    ? {\n        fieldName,\n        operation: 'addressLineTemplateTransformer',\n        parameters: [\n          useCase.toUpperCase() === 'PRIMARY'\n            ? AddressCases.PRIMARY_ADDRESS\n            : AddressCases.SECONDARY_ADDRESS,\n          fhirLineArrayPosition,\n          fieldName,\n          location\n        ]\n      }\n    : {\n        fieldName,\n        operation: 'addressFHIRPropertyTemplateTransformer',\n        parameters: [\n          useCase.toUpperCase() === 'PRIMARY'\n            ? AddressCases.PRIMARY_ADDRESS\n            : AddressCases.SECONDARY_ADDRESS,\n          location\n        ]\n      }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nfunction getMutationMapping({\n  location,\n  useCase,\n  fhirLineArrayPosition,\n  isLowestAdministrativeLevel\n}: {\n  location: string\n  useCase: string\n  fhirLineArrayPosition?: number\n  isLowestAdministrativeLevel?: boolean\n}): IMutationMapper {\n  return isUseCaseForPlaceOfEvent(useCase)\n    ? fhirLineArrayPosition || fhirLineArrayPosition === 0\n      ? {\n          operation: 'eventLocationMutationTransformer',\n          parameters: [\n            {\n              useCase,\n              lineNumber: fhirLineArrayPosition,\n              isLowestAdministrativeLevel\n            }\n          ]\n        }\n      : {\n          operation: 'eventLocationMutationTransformer',\n          parameters: [\n            {\n              useCase,\n              transformedFieldName: location,\n              isLowestAdministrativeLevel\n            }\n          ]\n        }\n    : fhirLineArrayPosition || fhirLineArrayPosition === 0\n    ? {\n        operation: 'addressMutationTransformer',\n        parameters: [\n          {\n            useCase:\n              useCase.toUpperCase() === 'PRIMARY'\n                ? AddressCases.PRIMARY_ADDRESS\n                : AddressCases.SECONDARY_ADDRESS,\n            lineNumber: fhirLineArrayPosition,\n            isLowestAdministrativeLevel\n          }\n        ]\n      }\n    : {\n        operation: 'addressMutationTransformer',\n        parameters: [\n          {\n            useCase:\n              useCase.toUpperCase() === 'PRIMARY'\n                ? AddressCases.PRIMARY_ADDRESS\n                : AddressCases.SECONDARY_ADDRESS,\n            transformedFieldName: location,\n            isLowestAdministrativeLevel\n          }\n        ]\n      }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nfunction getQueryMapping(\n  section: string,\n  type:\n    | 'TEXT'\n    | 'RADIO_GROUP'\n    | 'SELECT_WITH_OPTIONS'\n    | 'SELECT_WITH_DYNAMIC_OPTIONS',\n  location: string,\n  useCase: string,\n  fieldName: string,\n  fhirLineArrayPosition?: number\n): IQueryMapper {\n  return isUseCaseForPlaceOfEvent(useCase)\n    ? {\n        operation: 'eventLocationQueryTransformer',\n        parameters:\n          type === 'SELECT_WITH_OPTIONS' ||\n          type === 'SELECT_WITH_DYNAMIC_OPTIONS' ||\n          fieldName ===\n            `city${sentenceCase(useCase)}${sentenceCase(section)}` ||\n          fieldName ===\n            `postalCode${sentenceCase(useCase)}${sentenceCase(section)}` ||\n          fieldName ===\n            `internationalState${sentenceCase(useCase)}${sentenceCase(\n              section\n            )}` ||\n          fieldName ===\n            `internationalDistrict${sentenceCase(useCase)}${sentenceCase(\n              section\n            )}` ||\n          fieldName ===\n            `internationalCity${sentenceCase(useCase)}${sentenceCase(section)}`\n            ? [\n                {\n                  transformedFieldName: location,\n                  lineNumber: fhirLineArrayPosition\n                },\n                {\n                  fieldsToIgnoreForLocalAddress: [\n                    `internationalDistrict${sentenceCase(\n                      useCase\n                    )}${sentenceCase(section)}`,\n                    `internationalState${sentenceCase(useCase)}${sentenceCase(\n                      section\n                    )}`\n                  ],\n                  fieldsToIgnoreForInternationalAddress: [\n                    `locationLevel3${sentenceCase(useCase)}${sentenceCase(\n                      section\n                    )}`,\n                    `locationLevel4${sentenceCase(useCase)}${sentenceCase(\n                      section\n                    )}`,\n                    `locationLevel5${sentenceCase(useCase)}${sentenceCase(\n                      section\n                    )}`,\n                    `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n                    `state${sentenceCase(useCase)}${sentenceCase(section)}`\n                  ]\n                }\n              ]\n            : [{ lineNumber: fhirLineArrayPosition }]\n      }\n    : fhirLineArrayPosition || fhirLineArrayPosition === 0\n    ? {\n        operation: 'addressQueryTransformer',\n        parameters: [\n          {\n            useCase:\n              useCase.toUpperCase() === 'PRIMARY'\n                ? AddressCases.PRIMARY_ADDRESS\n                : AddressCases.SECONDARY_ADDRESS,\n            lineNumber: fhirLineArrayPosition\n          }\n        ]\n      }\n    : {\n        operation: 'addressQueryTransformer',\n        parameters: [\n          {\n            useCase:\n              useCase.toUpperCase() === 'PRIMARY'\n                ? AddressCases.PRIMARY_ADDRESS\n                : AddressCases.SECONDARY_ADDRESS,\n            transformedFieldName: location\n          }\n        ]\n      }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getMapping({\n  section,\n  type,\n  location,\n  useCase,\n  fieldName,\n  fhirLineArrayPosition,\n  isLowestAdministrativeLevel\n}: {\n  section: string\n  type:\n    | 'TEXT'\n    | 'RADIO_GROUP'\n    | 'SELECT_WITH_OPTIONS'\n    | 'SELECT_WITH_DYNAMIC_OPTIONS'\n  location: string\n  useCase: string\n  fieldName: string\n  fhirLineArrayPosition?: number\n  isLowestAdministrativeLevel?: boolean\n}): IFormFieldMapping {\n  if (type !== 'RADIO_GROUP') {\n    return {\n      template: getTemplateMapping(\n        location,\n        useCase,\n        fieldName,\n        fhirLineArrayPosition\n      ),\n      mutation: getMutationMapping({\n        location,\n        useCase,\n        fhirLineArrayPosition,\n        isLowestAdministrativeLevel\n      }),\n      query: getQueryMapping(\n        section,\n        type,\n        location,\n        useCase,\n        fieldName,\n        fhirLineArrayPosition\n      )\n    }\n  } else {\n    // Radio Groups in addresses have no need for certificate template\n    return {\n      mutation: getMutationMapping({\n        location,\n        useCase,\n        fhirLineArrayPosition,\n        isLowestAdministrativeLevel\n      }),\n      query: getQueryMapping(\n        section,\n        type,\n        location,\n        useCase,\n        fieldName,\n        fhirLineArrayPosition\n      )\n    }\n  }\n}\n\nexport function getEventLocationSelectionMapping(\n  mappingId: string,\n  certificateHandlebar: string = ''\n): IFormFieldMapping {\n  switch (mappingId) {\n    case 'placeOfBirth':\n    case 'placeOfDeath':\n      return {\n        mutation: {\n          operation: 'eventLocationMutationTransformer',\n          parameters: [{ useCase: mappingId }]\n        },\n        query: {\n          operation: 'eventLocationTypeQueryTransformer',\n          parameters: []\n        }\n      }\n    case 'birthLocation':\n      return {\n        template: {\n          fieldName: certificateHandlebar,\n          operation: 'eventLocationNameQueryOfflineTransformer',\n          parameters: ['facilities', 'placeOfBirth']\n        },\n        mutation: {\n          operation: 'eventLocationMutationTransformer',\n          parameters: [{ useCase: 'placeOfBirth' }]\n        },\n        query: {\n          operation: 'eventLocationIDQueryTransformer',\n          parameters: []\n        }\n      }\n    case 'deathLocation':\n      return {\n        template: {\n          fieldName: certificateHandlebar,\n          operation: 'eventLocationNameQueryOfflineTransformer',\n          parameters: ['facilities', 'placeOfDeath']\n        },\n        mutation: {\n          operation: 'eventLocationMutationTransformer',\n          parameters: [{ useCase: 'placeOfDeath' }]\n        },\n        query: {\n          operation: 'eventLocationIDQueryTransformer',\n          parameters: []\n        }\n      }\n    default:\n      throw Error(`Mapping not supported for ${mappingId}`)\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getIdentifiersFromFieldId(fieldId: string) {\n  const splitIds = fieldId.split('.')\n  return {\n    event: splitIds[0] as Event,\n    sectionId: splitIds[1],\n    groupId: splitIds[2],\n    fieldName: splitIds[3]\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getSectionIdentifiers(fieldId: string, form: ISerializedForm) {\n  const { event, sectionId } = getIdentifiersFromFieldId(fieldId)\n\n  const sectionIndex = form.sections.findIndex(({ id }) => id === sectionId)\n  return {\n    event,\n    sectionIndex,\n    sectionId\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getGroupIdentifiers(fieldId: string, form: ISerializedForm) {\n  const { event, groupId } = getIdentifiersFromFieldId(fieldId)\n\n  const { sectionIndex, sectionId } = getSectionIdentifiers(fieldId, form)\n\n  const groups = form.sections[sectionIndex].groups\n\n  const groupIndex = groups.findIndex(({ id }) => id === groupId)\n\n  return {\n    event,\n    sectionIndex,\n    sectionId,\n    groupIndex\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function getFieldIdentifiers(fieldId: string, form: ISerializedForm) {\n  const { event, fieldName } = getIdentifiersFromFieldId(fieldId)\n\n  const { sectionIndex, groupIndex, sectionId } = getGroupIdentifiers(\n    fieldId,\n    form\n  )\n\n  const fields = form.sections[sectionIndex].groups[groupIndex].fields\n\n  const fieldIndex = fields.findIndex(({ name }) => name === fieldName)\n\n  return {\n    event,\n    sectionIndex,\n    sectionId,\n    groupIndex,\n    fieldIndex\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function isUseCaseForPlaceOfEvent(useCase: string): Boolean {\n  return Object.values(\n    EventLocationAddressCases as Record<string, string>\n  ).includes(useCase)\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport const getAddressSubsection = (\n  previewGroup: AddressSubsections,\n  label: MessageDescriptor,\n  conditionalCase?: string\n): SerializedFormField[] => {\n  const fields: SerializedFormField[] = []\n  const subsection: SerializedFormField = {\n    name: previewGroup,\n    type: 'HEADING3',\n    label,\n    previewGroup: previewGroup,\n    initialValue: '',\n    validator: []\n  }\n\n  if (conditionalCase) {\n    subsection['conditionals'] = [\n      {\n        action: 'hide',\n        expression: `${conditionalCase}`\n      }\n    ]\n  }\n  fields.push(subsection)\n  return fields\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nfunction getAddressFieldsByConfiguration(\n  configuration: AllowedAddressConfigurations,\n  section: string\n): SerializedFormField[] {\n  switch (configuration.config) {\n    case EventLocationAddressCases.PLACE_OF_BIRTH:\n    case EventLocationAddressCases.PLACE_OF_DEATH:\n    case EventLocationAddressCases.PLACE_OF_MARRIAGE:\n      return getAddressFields('', configuration.config)\n    case AddressCases.PRIMARY_ADDRESS:\n      return getAddress(\n        section,\n        AddressCases.PRIMARY_ADDRESS,\n        configuration.conditionalCase\n      )\n    case AddressCases.SECONDARY_ADDRESS:\n      return getAddress(\n        section,\n        AddressCases.SECONDARY_ADDRESS,\n        configuration.conditionalCase\n      )\n    case AddressCopyConfigCases.PRIMARY_ADDRESS_SAME_AS_OTHER_PRIMARY:\n      if (\n        !configuration.label ||\n        !configuration.xComparisonSection ||\n        !configuration.yComparisonSection\n      ) {\n        throw new Error(\n          `Invalid address comparison case configuration for: ${configuration.config}`\n        )\n      }\n      return getXAddressSameAsY(\n        configuration.xComparisonSection,\n        configuration.yComparisonSection,\n        configuration.label,\n        configuration.conditionalCase\n      )\n    case AddressSubsections.PRIMARY_ADDRESS_SUBSECTION:\n    case AddressSubsections.SECONDARY_ADDRESS_SUBSECTION:\n      if (!configuration.label) {\n        throw new Error(\n          `Invalid address subsection configuration for: ${configuration.config}`\n        )\n      }\n      return getAddressSubsection(\n        configuration.config,\n        configuration.label,\n        configuration.conditionalCase\n      )\n    default:\n      return []\n  }\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nexport function decorateFormsWithAddresses(\n  defaultEventForm: ISerializedForm,\n  event: string\n): ISerializedForm {\n  const newForm = cloneDeep(defaultEventForm)\n  defaultAddressConfiguration.forEach(\n    ({ precedingFieldId, configurations }: IAddressConfiguration) => {\n      if (precedingFieldId.startsWith(event)) {\n        const { sectionIndex, sectionId, groupIndex, fieldIndex } =\n          getFieldIdentifiers(precedingFieldId, newForm)\n\n        let addressFields: SerializedFormField[] = []\n        let previewGroups: IPreviewGroup[] = []\n        configurations.forEach((configuration) => {\n          addressFields = addressFields.concat(\n            getAddressFieldsByConfiguration(configuration, sectionId)\n          )\n          previewGroups = previewGroups.concat(getPreviewGroups(configuration))\n        })\n        newForm.sections[sectionIndex].groups[groupIndex].fields.splice(\n          fieldIndex + 1,\n          0,\n          ...addressFields\n        )\n\n        const group = newForm.sections[sectionIndex].groups[groupIndex]\n        if (group.previewGroups) {\n          group.previewGroups = group.previewGroups.concat(previewGroups)\n        } else {\n          group.previewGroups = previewGroups\n        }\n      }\n    }\n  )\n\n  return newForm\n}\n\n// You should never need to edit this function.  If there is a bug here raise an issue in [Github](https://github.com/opencrvs/opencrvs-farajaland)\nfunction getAddress(\n  section: string,\n  addressCase: AddressCases,\n  conditionalCase?: string\n): SerializedFormField[] {\n  const defaultFields: SerializedFormField[] = getAddressFields(\n    section,\n    addressCase\n  )\n  if (conditionalCase) {\n    defaultFields.forEach((field) => {\n      let conditional\n      if (conditionalCase) {\n        conditional = {\n          action: 'hide',\n          expression: `${conditionalCase}`\n        }\n      }\n      if (\n        conditional &&\n        field.conditionals &&\n        field.conditionals.filter(\n          (conditional) => conditional.expression === conditionalCase\n        ).length === 0\n      ) {\n        field.conditionals.push(conditional)\n      } else if (conditional && !field.conditionals) {\n        field.conditionals = [conditional]\n      }\n    })\n  }\n  return defaultFields\n}\n\nfunction getAddressMariageOfParent(\n  section: string,\n  addressCase: AddressCases,\n  conditionalCase?: string\n): SerializedFormField[] {\n  const defaultFields: SerializedFormField[] = getAddressFields(\n    section,\n    addressCase\n  )\n  if (conditionalCase) {\n    defaultFields.forEach((field) => {\n      let conditional\n      if (conditionalCase) {\n        conditional = {\n          action: 'hide',\n          expression: `${conditionalCase}`\n        }\n      }\n      if (\n        conditional &&\n        field.conditionals &&\n        field.conditionals.filter(\n          (conditional) => conditional.expression === conditionalCase\n        ).length === 0\n      ) {\n        field.conditionals.push(conditional)\n      } else if (conditional && !field.conditionals) {\n        field.conditionals = [conditional]\n      }\n    })\n  }\n  return defaultFields\n}\n"
        }
    ]
}