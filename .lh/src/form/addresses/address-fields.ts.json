{
    "sourceFile": "src/form/addresses/address-fields.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713966441601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713966441601,
            "name": "Commit-0",
            "content": "import { MessageDescriptor } from 'react-intl'\nimport {\n  AddressCases,\n  AddressCopyConfigCases,\n  AddressSubsections,\n  EventLocationAddressCases,\n  SerializedFormField\n} from '../types/types'\nimport {\n  getAddressConditionals,\n  getDependency,\n  getMapping,\n  getPlaceOfEventConditionals,\n  isUseCaseForPlaceOfEvent,\n  sentenceCase\n} from '../../utils/address-utils'\nimport { yesNoRadioOptions } from '../common/select-options'\nimport { ADMIN_LEVELS } from '.'\nimport { getPlaceOfBirthFields } from '../birth/required-fields'\nimport { getPlaceOfDeathFields } from '../death/required-fields'\n\n// A radio group field that allows you to select an address from another section\nexport const getXAddressSameAsY = (\n  xComparisonSection: string,\n  yComparisonSection: string,\n  label: MessageDescriptor,\n  conditionalCase?: string\n): SerializedFormField[] => {\n  const copyAddressField: SerializedFormField = {\n    name: AddressCopyConfigCases.PRIMARY_ADDRESS_SAME_AS_OTHER_PRIMARY,\n    type: 'RADIO_GROUP',\n    label,\n    required: true,\n    initialValue: true,\n    previewGroup: AddressSubsections.PRIMARY_ADDRESS_SUBSECTION,\n    validator: [],\n    options: yesNoRadioOptions,\n    conditionals: conditionalCase\n      ? [\n          {\n            action: 'hide',\n            expression: `${conditionalCase}`\n          }\n        ]\n      : [],\n    mapping: {\n      mutation: {\n        operation: 'copyAddressTransformer',\n        parameters: [\n          AddressCases.PRIMARY_ADDRESS,\n          yComparisonSection,\n          AddressCases.PRIMARY_ADDRESS,\n          xComparisonSection\n        ]\n      },\n      query: {\n        operation: 'sameAddressFieldTransformer',\n        parameters: [\n          AddressCases.PRIMARY_ADDRESS,\n          yComparisonSection,\n          AddressCases.PRIMARY_ADDRESS,\n          xComparisonSection\n        ]\n      }\n    }\n  }\n  return [copyAddressField]\n}\n\n// A select field that uses the loaded administrative location levels from Humdata\n// We recommend that you do not edit this function\nexport function getAddressLocationSelect({\n  section,\n  location,\n  useCase,\n  fhirLineArrayPosition,\n  isLowestAdministrativeLevel\n}: {\n  section: string\n  location: string\n  useCase: string\n  /** Position where the location gets mapped into within a fhir.Address line-array */\n  fhirLineArrayPosition?: number\n  /** If the structure the smallest possible level. Allows saving fhir.Address.partOf */\n  isLowestAdministrativeLevel?: boolean\n}): SerializedFormField {\n  const fieldName = `${location}${sentenceCase(useCase)}${sentenceCase(\n    section\n  )}`\n  return {\n    name: fieldName,\n    type: 'SELECT_WITH_DYNAMIC_OPTIONS',\n    label: {\n      defaultMessage: sentenceCase(location),\n      description: `Title for the ${location} select`,\n      id: `form.field.label.${location}`\n    },\n    previewGroup: isUseCaseForPlaceOfEvent(useCase)\n      ? useCase\n      : `${useCase}Address`,\n    required: true,\n    initialValue: '',\n    validator: [],\n    placeholder: {\n      defaultMessage: 'Select',\n      description: 'Placeholder text for a select',\n      id: 'form.field.select.placeholder'\n    },\n    dynamicOptions: {\n      resource: 'locations',\n      dependency: getDependency(location, useCase, section),\n      initialValue: 'agentDefault'\n    },\n    conditionals: isUseCaseForPlaceOfEvent(useCase)\n      ? getPlaceOfEventConditionals(\n          section,\n          location,\n          useCase as EventLocationAddressCases\n        )\n      : getAddressConditionals(section, location, useCase),\n    mapping: getMapping({\n      section,\n      type: 'SELECT_WITH_DYNAMIC_OPTIONS',\n      location,\n      useCase,\n      fieldName,\n      fhirLineArrayPosition,\n      isLowestAdministrativeLevel\n    })\n  }\n}\n\n// Select fields are added for each administrative location level from Humdata\n// We recommend that you do not edit this function\nfunction getAdminLevelSelects(\n  section: string,\n  useCase: string\n): SerializedFormField[] {\n  switch (ADMIN_LEVELS) {\n    case 1:\n      return [\n        getAddressLocationSelect({\n          section,\n          location: 'state',\n          useCase,\n          isLowestAdministrativeLevel: true\n        })\n      ]\n    case 2:\n      return [\n        getAddressLocationSelect({ section, location: 'state', useCase }),\n        getAddressLocationSelect({\n          section,\n          location: 'district',\n          useCase,\n          isLowestAdministrativeLevel: true\n        })\n      ]\n    case 3:\n      return [\n        getAddressLocationSelect({ section, location: 'state', useCase }),\n        getAddressLocationSelect({ section, location: 'district', useCase }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel3',\n          useCase,\n          fhirLineArrayPosition: 10,\n          isLowestAdministrativeLevel: true\n        })\n      ]\n    case 4:\n      return [\n        getAddressLocationSelect({ section, location: 'state', useCase }),\n        getAddressLocationSelect({ section, location: 'district', useCase }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel3',\n          useCase,\n          fhirLineArrayPosition: 10\n        }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel4',\n          useCase,\n          fhirLineArrayPosition: 11,\n          isLowestAdministrativeLevel: true\n        })\n      ]\n    case 5:\n      return [\n        getAddressLocationSelect({ section, location: 'state', useCase }),\n        getAddressLocationSelect({ section, location: 'district', useCase }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel3',\n          useCase,\n          fhirLineArrayPosition: 10\n        }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel4',\n          useCase,\n          fhirLineArrayPosition: 11\n        }),\n        getAddressLocationSelect({\n          section,\n          location: 'locationLevel5',\n          useCase,\n          fhirLineArrayPosition: 12,\n          isLowestAdministrativeLevel: true\n        })\n      ]\n  }\n}\n\n// Place of birth and death fields require a select option to choose a hospital from health facility databases\n// We recommend that you do not edit this function\nfunction getPlaceOfEventFields(useCase: EventLocationAddressCases) {\n  switch (useCase) {\n    case EventLocationAddressCases.PLACE_OF_BIRTH:\n      return [...getPlaceOfBirthFields()]\n    case EventLocationAddressCases.PLACE_OF_DEATH:\n      return [...getPlaceOfDeathFields()]\n    case EventLocationAddressCases.PLACE_OF_MARRIAGE:\n      return []\n    default:\n      return []\n  }\n}\n\n// The fields that appear whenever an address is rendered\n\n// ====================== WARNING REGARDING ADDRESS CONFIGURATION ======================\n\n// WE HAVE SPENT CONSIDERABLE TIME WORKING IN COLLABORATION WITH INTERNATIONAL STANDARDS COMMITTEES ON INTEROPERABLE ADDRESS FORMAT.\n// WE STRONGLY BELIEVE THAT OUR ADDRESS STRUCTURE IS BEST OPTIMISED FOR EVERY POSSIBLE ADDRESS, ANYWHERE IN THE WORLD. (URBAN OR RURAL - STANDARDISED OR UNSTANDARDISED)\n// OUR APPROACH TO ADDRESS FORMAT INTEROPERATES WITH OTHER DIGITAL PUBLIC GOODS USING FHIR & OPENID\n// OUR RECOMENDATION IS THAT YOU ADOPT THESE ADDRESS FIELDS, OTHERWISE YOU MAY LOSE VALUABLE ANALYTICAL AND INTEROPERABLE FUNCTIONALITY\n// WE MARK REQUIRED AND OPTIONAL FIELDS BELOW ACCORDINGLY\n\n// ==================================== END WARNING ====================================\nexport function getAddressFields(\n  section: string,\n  addressCase: EventLocationAddressCases | AddressCases\n): SerializedFormField[] {\n  let useCase = addressCase as string\n  let placeOfEventFields: SerializedFormField[] = []\n  if (addressCase in AddressCases) {\n    useCase = useCase === AddressCases.PRIMARY_ADDRESS ? 'primary' : 'secondary'\n  } else {\n    placeOfEventFields = getPlaceOfEventFields(\n      useCase as EventLocationAddressCases\n    )\n  }\n\n  return [\n    ...placeOfEventFields,\n    {\n      name: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'SELECT_WITH_OPTIONS',\n      label: {\n        defaultMessage: 'Country',\n        description: 'Title for the country select',\n        id: 'form.field.label.country'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: true,\n      initialValue: 'FAR',\n      validator: [],\n      placeholder: {\n        defaultMessage: 'Select',\n        description: 'Placeholder text for a select',\n        id: 'form.field.select.placeholder'\n      },\n      options: {\n        resource: 'countries'\n      },\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'country', useCase)\n        : getAddressConditionals(section, 'country', useCase),\n      mapping: getMapping({\n        section,\n        type: 'SELECT_WITH_OPTIONS',\n        location: 'country',\n        useCase,\n        fieldName: `country${sentenceCase(useCase)}${sentenceCase(section)}`\n      })\n    }, // Required\n    // Select fields are added for each administrative location level from Humdata\n    ...getAdminLevelSelects(section, useCase), // Required\n    {\n      name: `city${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Town',\n        description: 'Title for the address line 4',\n        id: 'form.field.label.city'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(\n            section,\n            'configurableAddressLines',\n            useCase\n          )\n        : getAddressConditionals(section, 'configurableAddressLines', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'city',\n        useCase,\n        fieldName: `city${sentenceCase(useCase)}${sentenceCase(section)}`\n      })\n    },\n    {\n      name: `addressLine1${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Residential Area',\n        description: 'Title for the address line 1',\n        id: 'form.field.label.addressLine1'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(\n            section,\n            'configurableAddressLines',\n            useCase\n          )\n        : getAddressConditionals(section, 'configurableAddressLines', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `addressLine1${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`,\n        fhirLineArrayPosition: 2\n      })\n    },\n    {\n      name: `addressLine2${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Street',\n        description: 'Title for the address line 2',\n        id: 'form.field.label.addressLine2'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(\n            section,\n            'configurableAddressLines',\n            useCase\n          )\n        : getAddressConditionals(section, 'configurableAddressLines', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `addressLine2${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`,\n        fhirLineArrayPosition: 1\n      })\n    },\n    {\n      name: `addressLine3${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Number',\n        description: 'Title for the number field',\n        id: 'form.field.label.number'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(\n            section,\n            'configurableAddressLines',\n            useCase\n          )\n        : getAddressConditionals(section, 'configurableAddressLines', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `addressLine3${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`,\n        fhirLineArrayPosition: 0\n      })\n    },\n    {\n      name: `postalCode${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Postcode / Zip',\n        description: 'Title for the international postcode',\n        id: 'form.field.label.internationalPostcode'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `district${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(\n            section,\n            'configurableAddressLines',\n            useCase\n          )\n        : getAddressConditionals(section, 'configurableAddressLines', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'postalCode',\n        useCase,\n        fieldName: `postalCode${sentenceCase(useCase)}${sentenceCase(section)}`\n      })\n    },\n    // INTERNATIONAL ADDRESSES ARE SUPPLIED BECAUSE INFORMANTS & CITIZENS MAY LIVE ABROAD & REGISTER AN EVENT AT ONE OF YOUR FOREIGN EMBASSIES\n    // SOMETIMES THIS IS ALSO REQUIRED FOR DIPLOMATIC REASONS OR FOR MILITARY FORCES\n    {\n      name: `internationalState${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'State',\n        description: 'Title for the international state select',\n        id: 'form.field.label.internationalState'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: true,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'state',\n        useCase,\n        fieldName: `internationalState${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`\n      })\n    },\n    {\n      name: `internationalDistrict${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'District',\n        description: 'Title for the international district select',\n        id: 'form.field.label.internationalDistrict'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: true,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'district',\n        useCase,\n        fieldName: `internationalDistrict${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`\n      })\n    },\n    {\n      name: `internationalCity${sentenceCase(useCase)}${sentenceCase(section)}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'City / Town',\n        description: 'Title for the international city select',\n        id: 'form.field.label.internationalCity'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'city',\n        useCase,\n        fieldName: `internationalCity${sentenceCase(useCase)}${sentenceCase(\n          section\n        )}`\n      })\n    },\n    {\n      name: `internationalAddressLine1${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Address Line 1',\n        description: 'Title for the international address line 1 select',\n        id: 'form.field.label.internationalAddressLine1'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `internationalAddressLine1${sentenceCase(\n          useCase\n        )}${sentenceCase(section)}`,\n        fhirLineArrayPosition: 6\n      })\n    },\n    {\n      name: `internationalAddressLine2${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Address Line 2',\n        description: 'Title for the international address line 2 select',\n        id: 'form.field.label.internationalAddressLine2'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `internationalAddressLine2${sentenceCase(\n          useCase\n        )}${sentenceCase(section)}`,\n        fhirLineArrayPosition: 7\n      })\n    },\n    {\n      name: `internationalAddressLine3${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Address Line 3',\n        description: 'Title for the international address line 3 select',\n        id: 'form.field.label.internationalAddressLine3'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: '',\n        useCase,\n        fieldName: `internationalAddressLine3${sentenceCase(\n          useCase\n        )}${sentenceCase(section)}`,\n        fhirLineArrayPosition: 8\n      })\n    },\n    {\n      name: `internationalPostalCode${sentenceCase(useCase)}${sentenceCase(\n        section\n      )}`,\n      type: 'TEXT',\n      label: {\n        defaultMessage: 'Postcode / Zip',\n        description: 'Title for the international postcode',\n        id: 'form.field.label.internationalPostcode'\n      },\n      previewGroup: isUseCaseForPlaceOfEvent(useCase)\n        ? useCase\n        : `${useCase}Address`,\n      required: false,\n      initialValue: '',\n      validator: [],\n      dependency: `country${sentenceCase(useCase)}${sentenceCase(section)}`,\n      conditionals: isUseCaseForPlaceOfEvent(useCase)\n        ? getPlaceOfEventConditionals(section, 'international', useCase)\n        : getAddressConditionals(section, 'international', useCase),\n      mapping: getMapping({\n        section,\n        type: 'TEXT',\n        location: 'postalCode',\n        useCase,\n        fieldName: `internationalPostalCode${sentenceCase(\n          useCase\n        )}${sentenceCase(section)}`\n      })\n    }\n  ]\n}\n"
        }
    ]
}