{
    "sourceFile": "src/form/birth/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1713969302750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713969472912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,9 +459,9 @@\n               hideIfNidIntegrationEnabled.concat(detailsExist),\n               true\n             ),\n             // preceding field of address fields\n-            // divider('father-nid-seperator', detailsExist),\n+            divider('father-nid-seperator', detailsExist),\n             // ADDRESS FIELDS WILL RENDER HERE\n             divider('father-address-seperator', detailsExist),\n             getMaritalStatus(certificateHandlebars.fatherMaritalStatus, [\n               {\n"
                },
                {
                    "date": 1713972791514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,9 +338,9 @@\n             ), // Required field.\n             getBirthDate(\n               'motherBirthDate',\n               mothersBirthDateConditionals,\n-              ageOfIndividualValidators,\n+              parentsBirthDateValidators,\n               certificateHandlebars.motherBirthDate\n             ), // Required field.\n             exactDateOfBirthUnknown(detailsExistConditional),\n             getAgeOfIndividualInYears(\n"
                },
                {
                    "date": 1713972814232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n             ), // Required field.\n             getBirthDate(\n               'fatherBirthDate',\n               fathersBirthDateConditionals,\n-              ageOfIndividualValidators,\n+              parentsBirthDateValidators,\n               certificateHandlebars.fatherBirthDate\n             ), // Required field.\n             exactDateOfBirthUnknown(detailsExistConditional),\n             getAgeOfIndividualInYears(\n"
                },
                {
                    "date": 1713974721664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -469,8 +469,9 @@\n                 expression: '!values.detailsExist'\n               }\n             ]),\n             getDateMarriageField(),\n+            ...getAddressMariageParentInBirthFields(\"father\", )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n             getAgeTimeOfbirthField('father'),\n             getOccupation(certificateHandlebars.fatherOccupation, [\n               {\n"
                },
                {
                    "date": 1713974761862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n import { getDateMarriageField } from '../custom-fields'\n import { getBirthOrderField } from '../custom-fields'\n import { getTotalNumberOfChildrenBornAliveField } from '../custom-fields'\n import { getChildrenStillLivingIncludingThisBirthField } from '../custom-fields'\n+import { getAddressMariageParentInBirthFields } from '../addresses/address-fields'\n // ======================= FORM CONFIGURATION =======================\n \n // A REGISTRATION FORM IS MADE UP OF PAGES OR \"SECTIONS\"\n \n@@ -469,9 +470,12 @@\n                 expression: '!values.detailsExist'\n               }\n             ]),\n             getDateMarriageField(),\n-            ...getAddressMariageParentInBirthFields(\"father\", )\n+            ...getAddressMariageParentInBirthFields(\n+              'father',\n+              'SECONDARY_ADDRESS'\n+            ),\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n             getAgeTimeOfbirthField('father'),\n             getOccupation(certificateHandlebars.fatherOccupation, [\n               {\n"
                },
                {
                    "date": 1713975345787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n import { getBirthOrderField } from '../custom-fields'\n import { getTotalNumberOfChildrenBornAliveField } from '../custom-fields'\n import { getChildrenStillLivingIncludingThisBirthField } from '../custom-fields'\n import { getAddressMariageParentInBirthFields } from '../addresses/address-fields'\n+import { getAddressMariageOfParent } from '@countryconfig/utils/address-utils'\n // ======================= FORM CONFIGURATION =======================\n \n // A REGISTRATION FORM IS MADE UP OF PAGES OR \"SECTIONS\"\n \n@@ -470,12 +471,9 @@\n                 expression: '!values.detailsExist'\n               }\n             ]),\n             getDateMarriageField(),\n-            ...getAddressMariageParentInBirthFields(\n-              'father',\n-              'SECONDARY_ADDRESS'\n-            ),\n+            ...getAddressMariageOfParent('father', 'SECONDARY_ADDRESS'),\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n             getAgeTimeOfbirthField('father'),\n             getOccupation(certificateHandlebars.fatherOccupation, [\n               {\n"
                },
                {
                    "date": 1713975450252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n  *\n  * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.\n  */\n \n-import { Event, ISerializedForm } from '../types/types'\n+import { AddressCases, Event, ISerializedForm } from '../types/types'\n import { formMessageDescriptors } from '../common/messages'\n import { informantType } from './required-fields'\n import {\n   getBirthDate,\n@@ -471,9 +471,12 @@\n                 expression: '!values.detailsExist'\n               }\n             ]),\n             getDateMarriageField(),\n-            ...getAddressMariageOfParent('father', 'SECONDARY_ADDRESS'),\n+            ...getAddressMariageOfParent(\n+              'father',\n+              AddressCases.SECONDARY_ADDRESS\n+            ),\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n             getAgeTimeOfbirthField('father'),\n             getOccupation(certificateHandlebars.fatherOccupation, [\n               {\n"
                },
                {
                    "date": 1713975784694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,9 +473,10 @@\n             ]),\n             getDateMarriageField(),\n             ...getAddressMariageOfParent(\n               'father',\n-              AddressCases.SECONDARY_ADDRESS\n+              AddressCases.SECONDARY_ADDRESS,\n+              '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus))'\n             ),\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n             getAgeTimeOfbirthField('father'),\n             getOccupation(certificateHandlebars.fatherOccupation, [\n"
                },
                {
                    "date": 1713975851022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,17 +475,11 @@\n             ...getAddressMariageOfParent(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n               '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus))'\n-            ),\n+            )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n-            getAgeTimeOfbirthField('father'),\n-            getOccupation(certificateHandlebars.fatherOccupation, [\n-              {\n-                action: 'hide',\n-                expression: '!values.detailsExist'\n-              }\n-            ])\n+            \n           ],\n           previewGroups: [fatherNameInEnglish]\n         }\n       ],\n"
                },
                {
                    "date": 1713975858372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,8 +464,15 @@\n             // preceding field of address fields\n             divider('father-nid-seperator', detailsExist),\n             // ADDRESS FIELDS WILL RENDER HERE\n             divider('father-address-seperator', detailsExist),\n+            getAgeTimeOfbirthField('father'),\n+            getOccupation(certificateHandlebars.fatherOccupation, [\n+              {\n+                action: 'hide',\n+                expression: '!values.detailsExist'\n+              }\n+            ]),\n             getMaritalStatus(certificateHandlebars.fatherMaritalStatus, [\n               {\n                 action: 'hide',\n                 expression: '!values.detailsExist'\n"
                },
                {
                    "date": 1713975893793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,12 +481,11 @@\n             getDateMarriageField(),\n             ...getAddressMariageOfParent(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n-              '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus))'\n+              '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))'\n             )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n-            \n           ],\n           previewGroups: [fatherNameInEnglish]\n         }\n       ],\n"
                },
                {
                    "date": 1713977230709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,10 @@\n             getDateMarriageField(),\n             ...getAddressMariageOfParent(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n-              '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))'\n+              '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))',\n+              \"\"\n             )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n           ],\n           previewGroups: [fatherNameInEnglish]\n"
                },
                {
                    "date": 1713977244896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,9 +482,9 @@\n             ...getAddressMariageOfParent(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n               '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))',\n-              \"\"\n+              'PlaceOfMariage'\n             )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n           ],\n           previewGroups: [fatherNameInEnglish]\n"
                },
                {
                    "date": 1713977268643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,9 @@\n import { getDateMarriageField } from '../custom-fields'\n import { getBirthOrderField } from '../custom-fields'\n import { getTotalNumberOfChildrenBornAliveField } from '../custom-fields'\n import { getChildrenStillLivingIncludingThisBirthField } from '../custom-fields'\n-import { getAddressMariageParentInBirthFields } from '../addresses/address-fields'\n-import { getAddressMariageOfParent } from '@countryconfig/utils/address-utils'\n+import { getAddressPlaceOfMariage } from '@countryconfig/utils/address-utils'\n // ======================= FORM CONFIGURATION =======================\n \n // A REGISTRATION FORM IS MADE UP OF PAGES OR \"SECTIONS\"\n \n@@ -478,9 +477,9 @@\n                 expression: '!values.detailsExist'\n               }\n             ]),\n             getDateMarriageField(),\n-            ...getAddressMariageOfParent(\n+            ...getAddressPlaceOfMariage(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n               '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))',\n               'PlaceOfMariage'\n"
                },
                {
                    "date": 1713977381065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,9 +485,17 @@\n               'PlaceOfMariage'\n             )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n           ],\n-          previewGroups: [fatherNameInEnglish]\n+          previewGroups: [fatherNameInEnglish, {\n+            id: 'secondaryAddress',\n+            label: {\n+              defaultMessage: 'Secondary address',\n+              description: 'Preview group label for secodary address',\n+              id: 'form.field.previewGroups.secondaryAddress'\n+            },\n+            fieldToRedirect: 'countrySecondary'\n+          }]\n         }\n       ],\n       mapping: getSectionMapping('father')\n     },\n"
                },
                {
                    "date": 1713977435467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,22 +481,22 @@\n             ...getAddressPlaceOfMariage(\n               'father',\n               AddressCases.SECONDARY_ADDRESS,\n               '((values.maritalStatus===\"SINGLE\") || (values.maritalStatus===\"WIDOWED\") || (values.maritalStatus===\"DIVORCED\") || (values.maritalStatus===\"SEPARATED\") || (values.maritalStatus===\"NOT_STATED\") || (!values.maritalStatus) || (!values.detailsExist))',\n-              'PlaceOfMariage'\n+              'placeOfMarriageAddress'\n             )\n             //getEducation(certificateHandlebars.fatherEducationalAttainment),\n           ],\n           previewGroups: [\n             fatherNameInEnglish,\n             {\n-              id: 'secondaryAddress',\n+              id: 'placeOfMarriageAddress',\n               label: {\n                 defaultMessage: 'Secondary address',\n                 description: 'Preview group label for secodary address',\n                 id: 'form.field.previewGroups.secondaryAddress'\n               },\n-              fieldToRedirect: 'countrySecondary'\n+              fieldToRedirect: 'countrySecondaryFather'\n             }\n           ]\n         }\n       ],\n"
                },
                {
                    "date": 1713977583095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,11 +490,11 @@\n             fatherNameInEnglish,\n             {\n               id: 'placeOfMarriageAddress',\n               label: {\n-                defaultMessage: 'Secondary address',\n-                description: 'Preview group label for secodary address',\n-                id: 'form.field.previewGroups.secondaryAddress'\n+                defaultMessage: 'Place of Marriage',\n+                description: 'Preview group label for place of marriage',\n+                id: 'form.field.previewGroups.placeOfBirhAddress'\n               },\n               fieldToRedirect: 'countrySecondaryFather'\n             }\n           ]\n"
                }
            ],
            "date": 1713969302750,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.\n */\n\nimport { Event, ISerializedForm } from '../types/types'\nimport { formMessageDescriptors } from '../common/messages'\nimport { informantType } from './required-fields'\nimport {\n  getBirthDate,\n  getGender,\n  getFamilyNameField,\n  getFirstNameField,\n  getNationality,\n  otherInformantType,\n  getDetailsExist,\n  getReasonNotExisting\n} from '../common/common-required-fields'\nimport {\n  exactDateOfBirthUnknown,\n  getAgeOfIndividualInYears,\n  getMaritalStatus,\n  registrationEmail,\n  registrationPhone,\n  getEducation,\n  getOccupation,\n  divider\n} from '../common/common-optional-fields'\nimport {\n  attendantAtBirth,\n  birthType,\n  multipleBirth,\n  weightAtBirth\n} from './optional-fields'\nimport {\n  childNameInEnglish,\n  fatherNameInEnglish,\n  informantNameInEnglish,\n  motherNameInEnglish\n} from '../common/preview-groups'\nimport {\n  isValidChildBirthDate,\n  hideIfInformantMotherOrFather,\n  mothersDetailsExistConditionals,\n  mothersBirthDateConditionals,\n  parentsBirthDateValidators,\n  detailsExist,\n  motherFirstNameConditionals,\n  motherFamilyNameConditionals,\n  fathersDetailsExistConditionals,\n  fathersBirthDateConditionals,\n  fatherFirstNameConditionals,\n  fatherFamilyNameConditionals,\n  informantNotMotherOrFather,\n  detailsExistConditional,\n  ageOfIndividualValidators,\n  ageOfParentsConditionals,\n  informantMiddleNameConditionals\n} from '../common/default-validation-conditionals'\nimport {\n  informantFirstNameConditionals,\n  informantFamilyNameConditionals,\n  informantBirthDateConditionals,\n  exactDateOfBirthUnknownConditional,\n  hideIfNidIntegrationEnabled\n} from '../common/default-validation-conditionals'\nimport { documentsSection, registrationSection } from './required-sections'\nimport { certificateHandlebars } from './certificate-handlebars'\nimport { getSectionMapping } from '@countryconfig/utils/mapping/section/birth/mapping-utils'\nimport { getCommonSectionMapping } from '@countryconfig/utils/mapping/field-mapping-utils'\nimport { getReasonForLateRegistration } from '../custom-fields'\nimport { getIDNumberFields, getIDType } from '../custom-fields'\nimport { getMiddleNameField } from '../custom-fields'\nimport { getSpecifyRankField } from '../custom-fields'\nimport { getAgeTimeOfbirthField } from '../custom-fields'\nimport { getDateMarriageField } from '../custom-fields'\nimport { getBirthOrderField } from '../custom-fields'\nimport { getTotalNumberOfChildrenBornAliveField } from '../custom-fields'\nimport { getChildrenStillLivingIncludingThisBirthField } from '../custom-fields'\n// ======================= FORM CONFIGURATION =======================\n\n// A REGISTRATION FORM IS MADE UP OF PAGES OR \"SECTIONS\"\n\n// A \"SECTION\" CAN BE SPLIT OVER MULTIPLE SUB-PAGES USING \"GROUPS\"\n\n// GROUPS CONTAIN A FIELDS ARRAY AND EACH FIELD IS RENDERED BY A FORM FIELD FUNCTION\n\n// MOVE FORM FIELD FUNCTIONS UP AND DOWN TO CHANGE THE VERTICAL ORDER OF FIELDS\n\n// IN EACH GROUP, REQUIRED FIELDS MUST BE INCLUDED AS-IS FOR OPENCRVS TO FUNCTION\n\n// OPTIONAL FIELDS CAN BE COMMENTED OUT OR REMOVED IF NOT REQUIRED\n\n// DUPLICATE & FOLLOW THE INSTRUCTIONS IN THE createCustomFieldExample FUNCTION WHEN REQUIRED FOR ADDING NEW CUSTOM FIELDS\n\nexport const birthForm: ISerializedForm = {\n  sections: [\n    registrationSection, // REQUIRED HIDDEN SECTION CONTAINING IDENTIFIERS\n    {\n      id: 'information',\n      viewType: 'form',\n      name: {\n        defaultMessage: 'Information',\n        description: 'Form section name for Information',\n        id: 'form.section.information.name'\n      },\n      groups: [\n        {\n          id: 'information-group',\n          title: {\n            defaultMessage:\n              'Introduce the birth registration process to the informant',\n            description: 'Event information title for the birth',\n            id: 'register.eventInfo.birth.title'\n          },\n          conditionals: [\n            {\n              action: 'hide',\n              expression: 'window.config.HIDE_BIRTH_EVENT_REGISTER_INFORMATION'\n            }\n          ],\n          fields: [\n            {\n              name: 'list',\n              type: 'BULLET_LIST',\n              items: [\n                {\n                  defaultMessage:\n                    'I am going to help you make a declaration of birth.',\n                  description: 'Form information for birth',\n                  id: 'form.section.information.birth.bullet1'\n                },\n                {\n                  defaultMessage:\n                    'As the legal Informant it is important that all the information provided by you is accurate.',\n                  description: 'Form information for birth',\n                  id: 'form.section.information.birth.bullet2'\n                },\n                {\n                  defaultMessage:\n                    'Once the declaration is processed you will receive you will receive an SMS to tell you when to visit the office to collect the certificate - Take your ID with you.',\n                  description: 'Form information for birth',\n                  id: 'form.section.information.birth.bullet3'\n                },\n                {\n                  defaultMessage:\n                    'Make sure you collect the certificate. A birth certificate is critical for this child, especially to make their life easy later on. It will help to access health services, school examinations and government benefits.',\n                  description: 'Form information for birth',\n                  id: 'form.section.information.birth.bullet4'\n                }\n              ],\n              // this is to set the title of the page\n              label: {\n                id: 'register.eventInfo.birth.title'\n              },\n              initialValue: '',\n              validator: []\n            }\n          ]\n        }\n      ]\n    },\n    {\n      id: 'child',\n      viewType: 'form',\n      name: formMessageDescriptors.childTab,\n      title: formMessageDescriptors.childTitle,\n      mapping: getSectionMapping('child'), // These mappings support configurable identifiers in the event-registration API\n      groups: [\n        {\n          id: 'child-view-group',\n          fields: [\n            // COMMENT IN AND DUPLICATE AS REQUIRED IN ORDER TO CREATE A CUSTOM FIELD: createCustomFieldExample(),\n            // createCustomFieldExample(),\n            getFirstNameField(\n              'childNameInEnglish',\n              [],\n              certificateHandlebars.childFirstName\n            ), // Required field.  Names in Latin characters must be provided for international passport\n            getMiddleNameField('child', 'childNameInEnglish', []),\n            getFamilyNameField(\n              'childNameInEnglish',\n              [],\n              certificateHandlebars.childFamilyName\n            ), // Required field.  Names in Latin characters must be provided for international passport\n            getGender(certificateHandlebars.childGender), // Required field.\n            getBirthDate(\n              'childBirthDate',\n              [],\n              isValidChildBirthDate,\n              certificateHandlebars.eventDate\n            ), // Required field.\n            getReasonForLateRegistration('birth'),\n            // PLACE OF BIRTH FIELDS WILL RENDER HERE\n            divider('place-of-birth-seperator'),\n            attendantAtBirth,\n            birthType,\n            getSpecifyRankField(),\n            getBirthOrderField(),\n            weightAtBirth\n          ],\n          previewGroups: [childNameInEnglish] // Preview groups are used to structure data nicely in Review Page UI\n        }\n      ]\n    },\n    {\n      id: 'informant',\n      viewType: 'form',\n      name: {\n        defaultMessage: 'Informant',\n        description: 'Form section name for Informant',\n        id: 'form.section.informant.name'\n      },\n      title: formMessageDescriptors.birthInformantTitle,\n      groups: [\n        {\n          id: 'informant-view-group',\n          fields: [\n            informantType, // Required field.\n            otherInformantType(Event.Birth), // Required field.\n            getFirstNameField(\n              'informantNameInEnglish',\n              informantFirstNameConditionals.concat(\n                hideIfInformantMotherOrFather\n              ),\n              certificateHandlebars.informantFirstName\n            ), // Required field.\n            getMiddleNameField(\n              'informant',\n              'informantNameInEnglish',\n              informantMiddleNameConditionals.concat(\n                hideIfInformantMotherOrFather\n              )\n            ),\n            getFamilyNameField(\n              'informantNameInEnglish',\n              informantFamilyNameConditionals.concat(\n                hideIfInformantMotherOrFather\n              ),\n              certificateHandlebars.informantFamilyName\n            ), // Required field.\n            getBirthDate(\n              'informantBirthDate',\n              informantBirthDateConditionals.concat(\n                hideIfInformantMotherOrFather\n              ),\n              [\n                {\n                  operation: 'dateFormatIsCorrect',\n                  parameters: []\n                },\n                {\n                  operation: 'dateInPast',\n                  parameters: []\n                }\n              ],\n              certificateHandlebars.informantBirthDate\n            ), // Required field.\n            exactDateOfBirthUnknown(hideIfInformantMotherOrFather),\n            getAgeOfIndividualInYears(\n              formMessageDescriptors.ageOfInformant,\n              exactDateOfBirthUnknownConditional.concat(\n                hideIfInformantMotherOrFather\n              ),\n              ageOfIndividualValidators\n            ),\n            getNationality(\n              certificateHandlebars.informantNationality,\n              hideIfInformantMotherOrFather\n            ), // Required field.\n            getIDType(\n              'birth',\n              'informant',\n              hideIfNidIntegrationEnabled.concat(hideIfInformantMotherOrFather),\n              true\n            ),\n            ...getIDNumberFields(\n              'informant',\n              hideIfNidIntegrationEnabled.concat(hideIfInformantMotherOrFather),\n              true\n            ),\n            // preceding field of address fields\n            divider('informant-nid-seperator', [\n              {\n                action: 'hide',\n                expression: informantNotMotherOrFather\n              }\n            ]),\n            // ADDRESS FIELDS WILL RENDER HERE\n            divider('informant-address-seperator', [\n              {\n                action: 'hide',\n                expression: informantNotMotherOrFather\n              }\n            ]),\n            registrationPhone, // If you wish to enable automated SMS notifications to informants, include this\n            registrationEmail // If you wish to enable automated Email notifications to informants, include this\n          ],\n          previewGroups: [informantNameInEnglish]\n        }\n      ],\n      mapping: getCommonSectionMapping('informant')\n    },\n    {\n      id: 'mother',\n      viewType: 'form',\n      name: formMessageDescriptors.motherName,\n      title: formMessageDescriptors.motherTitle,\n      groups: [\n        {\n          id: 'mother-view-group',\n          fields: [\n            getDetailsExist(\n              formMessageDescriptors.mothersDetailsExist,\n              mothersDetailsExistConditionals\n            ), // Strongly recommend is required if you want to register abandoned / orphaned children!\n            divider(\n              'mother-details-seperator',\n              mothersDetailsExistConditionals\n            ),\n            getReasonNotExisting(certificateHandlebars.motherReasonNotApplying), // Strongly recommend is required if you want to register abandoned / orphaned children!\n            getFirstNameField(\n              'motherNameInEnglish',\n              motherFirstNameConditionals,\n              certificateHandlebars.motherFirstName\n            ), // Required field.\n            getMiddleNameField('mother', 'motherNameInEnglish', []),\n            getFamilyNameField(\n              'motherNameInEnglish',\n              motherFamilyNameConditionals,\n              certificateHandlebars.motherFamilyName\n            ), // Required field.\n            getBirthDate(\n              'motherBirthDate',\n              mothersBirthDateConditionals,\n              ageOfIndividualValidators,\n              certificateHandlebars.motherBirthDate\n            ), // Required field.\n            exactDateOfBirthUnknown(detailsExistConditional),\n            getAgeOfIndividualInYears(\n              formMessageDescriptors.ageOfMother,\n              exactDateOfBirthUnknownConditional.concat(\n                detailsExistConditional\n              ),\n              ageOfParentsConditionals\n            ),\n            getNationality(\n              certificateHandlebars.motherNationality,\n              detailsExist\n            ), // Required field.\n            getIDType(\n              'birth',\n              'mother',\n              hideIfNidIntegrationEnabled.concat(detailsExist),\n              true\n            ),\n            ...getIDNumberFields(\n              'mother',\n              hideIfNidIntegrationEnabled.concat(detailsExist),\n              true\n            ),\n            getTotalNumberOfChildrenBornAliveField(),\n            getChildrenStillLivingIncludingThisBirthField(),\n            getAgeTimeOfbirthField('mother'),\n            // preceding field of address fields\n            divider('mother-nid-seperator', detailsExist),\n            // ADDRESS FIELDS WILL RENDER HERE\n            divider('mother-address-seperator', detailsExist),\n            /**getMaritalStatus(certificateHandlebars.motherMaritalStatus, [\n              {\n                action: 'hide',\n                expression: '!values.detailsExist'\n              }\n            ]),**/\n            //getEducation(certificateHandlebars.motherEducationalAttainment),\n            getOccupation(certificateHandlebars.motherOccupation, [\n              {\n                action: 'hide',\n                expression: '!values.detailsExist'\n              }\n            ]),\n            //getAgeTimeOfbirthField(),\n            multipleBirth\n          ],\n          previewGroups: [motherNameInEnglish]\n        }\n      ],\n      mapping: getSectionMapping('mother')\n    },\n    {\n      id: 'father',\n      viewType: 'form',\n      name: {\n        defaultMessage: 'Father',\n        description: 'Form section name for Father',\n        id: 'form.section.father.name'\n      },\n      title: {\n        defaultMessage: \"Father's details\",\n        description: 'Form section title for Father',\n        id: 'form.section.father.title'\n      },\n      groups: [\n        {\n          id: 'father-view-group',\n          fields: [\n            getDetailsExist(\n              formMessageDescriptors.fathersDetailsExist,\n              fathersDetailsExistConditionals\n            ), // Strongly recommend is required if you want to register abandoned / orphaned children!\n            divider(\n              'father-details-seperator',\n              fathersDetailsExistConditionals\n            ),\n            getReasonNotExisting('fatherReasonNotApplying'), // Strongly recommend is required if you want to register abandoned / orphaned children!\n            getFirstNameField(\n              'fatherNameInEnglish',\n              fatherFirstNameConditionals,\n              certificateHandlebars.fatherFirstName\n            ), // Required field.\n            getMiddleNameField('father', 'fatherNameInEnglish', []),\n            getFamilyNameField(\n              'fatherNameInEnglish',\n              fatherFamilyNameConditionals,\n              certificateHandlebars.fatherFamilyName\n            ), // Required field.\n            getBirthDate(\n              'fatherBirthDate',\n              fathersBirthDateConditionals,\n              ageOfIndividualValidators,\n              certificateHandlebars.fatherBirthDate\n            ), // Required field.\n            exactDateOfBirthUnknown(detailsExistConditional),\n            getAgeOfIndividualInYears(\n              formMessageDescriptors.ageOfFather,\n              exactDateOfBirthUnknownConditional.concat(\n                detailsExistConditional\n              ),\n              ageOfParentsConditionals\n            ),\n            getNationality(\n              certificateHandlebars.fatherNationality,\n              detailsExist\n            ), // Required field.\n            getIDType(\n              'birth',\n              'father',\n              hideIfNidIntegrationEnabled.concat(detailsExist),\n              true\n            ),\n            ...getIDNumberFields(\n              'father',\n              hideIfNidIntegrationEnabled.concat(detailsExist),\n              true\n            ),\n            // preceding field of address fields\n            // divider('father-nid-seperator', detailsExist),\n            // ADDRESS FIELDS WILL RENDER HERE\n            divider('father-address-seperator', detailsExist),\n            getMaritalStatus(certificateHandlebars.fatherMaritalStatus, [\n              {\n                action: 'hide',\n                expression: '!values.detailsExist'\n              }\n            ]),\n            getDateMarriageField(),\n            //getEducation(certificateHandlebars.fatherEducationalAttainment),\n            getAgeTimeOfbirthField('father'),\n            getOccupation(certificateHandlebars.fatherOccupation, [\n              {\n                action: 'hide',\n                expression: '!values.detailsExist'\n              }\n            ])\n          ],\n          previewGroups: [fatherNameInEnglish]\n        }\n      ],\n      mapping: getSectionMapping('father')\n    },\n    documentsSection // REQUIRED SECTION FOR DOCUMENT ATTACHMENTS\n  ]\n}\n"
        }
    ]
}