{
    "sourceFile": "src/form/common/common-required-fields.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713964420047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713964420047,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.\n */\n\nimport { formMessageDescriptors } from './messages'\nimport { SerializedFormField, Conditional, Event } from '../types/types'\nimport { genderOptions } from './select-options'\nimport { getFieldMapping } from '@countryconfig/utils/mapping/field-mapping-utils'\nimport { Validator } from '../types/validators'\nimport { MessageDescriptor } from 'react-intl'\n\nexport const getBirthDate = (\n  fieldName: string,\n  conditionals: Conditional[],\n  validator: any[],\n  certificateHandlebar: string\n): SerializedFormField => ({\n  name: fieldName, // A field with this name MUST exist\n  type: 'DATE',\n  label: formMessageDescriptors.dateOfBirth,\n  required: true,\n  conditionals,\n  initialValue: '',\n  validator,\n  mapping: getFieldMapping('birthDate', certificateHandlebar)\n})\n\nexport const getGender = (certificateHandlebar: string) =>\n  ({\n    name: 'gender', // A field with this name MUST exist\n    type: 'SELECT_WITH_OPTIONS',\n    label: formMessageDescriptors.sex,\n    required: true,\n    initialValue: '',\n    validator: [],\n    placeholder: formMessageDescriptors.formSelectPlaceholder,\n    mapping: getFieldMapping('gender', certificateHandlebar),\n    options: genderOptions\n  } satisfies SerializedFormField)\n\nexport const getFamilyNameField = (\n  previewGroup: string,\n  conditionals: Conditional[],\n  certificateHandlebar: string\n) =>\n  ({\n    name: 'familyNameEng', // A field with this name MUST exist\n    previewGroup,\n    conditionals,\n    type: 'TEXT',\n    label: formMessageDescriptors.familyName,\n    maxLength: 32,\n    required: true,\n    initialValue: '',\n    validator: [\n      {\n        operation: 'englishOnlyNameFormat'\n      }\n    ],\n    mapping: getFieldMapping('familyName', certificateHandlebar)\n  } satisfies SerializedFormField)\n\nexport const getFirstNameField = (\n  previewGroup: string,\n  conditionals: Conditional[],\n  certificateHandlebar: string\n) =>\n  ({\n    name: 'firstNamesEng', // A field with this name MUST exist\n    previewGroup,\n    type: 'TEXT',\n    label: {\n      defaultMessage: 'First name(s)',\n      description: 'Label for form field: First names',\n      id: 'form.field.label.firstNames'\n    },\n    conditionals,\n    maxLength: 32,\n    required: true,\n    initialValue: '',\n    validator: [\n      {\n        operation: 'englishOnlyNameFormat'\n      }\n    ],\n    mapping: getFieldMapping('firstNames', certificateHandlebar)\n  } satisfies SerializedFormField)\n\nexport const getNationality = (\n  certificateHandlebar: string,\n  conditionals: Conditional[]\n) =>\n  ({\n    name: 'nationality',\n    type: 'SELECT_WITH_OPTIONS',\n    label: formMessageDescriptors.nationality,\n    required: true,\n    initialValue: 'FTR',\n    validator: [],\n    placeholder: formMessageDescriptors.formSelectPlaceholder,\n    options: {\n      resource: 'countries'\n    },\n    conditionals,\n    mapping: getFieldMapping('nationality', certificateHandlebar)\n  } satisfies SerializedFormField)\n\nexport const otherInformantType = (event: Event) =>\n  ({\n    name: 'otherInformantType',\n    type: 'TEXT',\n    label:\n      event == Event.Birth\n        ? formMessageDescriptors.informantsRelationWithChild\n        : event == Event.Death\n        ? formMessageDescriptors.relationshipToDeceased\n        : formMessageDescriptors.relationshipToSpouses,\n    placeholder: formMessageDescriptors.relationshipPlaceHolder,\n    required: true,\n    initialValue: '',\n    validator: [\n      {\n        operation: 'englishOnlyNameFormat'\n      }\n    ],\n    conditionals: [\n      {\n        action: 'hide',\n        expression: 'values.informantType !== \"OTHER\"'\n      }\n    ],\n    mapping: getFieldMapping('otherInformantType')\n  } satisfies SerializedFormField)\n\nexport const getNationalID = (\n  fieldName: string,\n  conditionals: Conditional[],\n  validator: Validator[],\n  certificateHandlebar: string\n) =>\n  ({\n    name: fieldName,\n    type: 'TEXT',\n    label: formMessageDescriptors.iDTypeNationalID,\n    required: true,\n    initialValue: '',\n    validator,\n    conditionals,\n    mapping: getFieldMapping('nationalId', certificateHandlebar)\n  } satisfies SerializedFormField)\n\nexport const getDetailsExist = (\n  label: MessageDescriptor,\n  conditionals: Conditional[]\n) =>\n  ({\n    name: 'detailsExist',\n    type: 'CHECKBOX',\n    label,\n    required: true,\n    checkedValue: false,\n    uncheckedValue: true,\n    hideHeader: true,\n    initialValue: true,\n    validator: [],\n    conditionals,\n    mapping: getFieldMapping('detailsExist'),\n    ignoreBottomMargin: true\n  } satisfies SerializedFormField)\n\nexport const getReasonNotExisting = (certificateHandlebar: string) =>\n  ({\n    name: 'reasonNotApplying',\n    conditionals: [\n      {\n        action: 'hide',\n        expression: 'values.detailsExist'\n      }\n    ],\n    type: 'TEXT',\n    label: formMessageDescriptors.reasonNA,\n    validator: [],\n    initialValue: '',\n    required: true,\n    mapping: getFieldMapping('reasonNotApplying', certificateHandlebar)\n  } satisfies SerializedFormField)\n"
        }
    ]
}