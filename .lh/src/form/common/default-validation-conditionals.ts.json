{
    "sourceFile": "src/form/common/default-validation-conditionals.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1713972805348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713972998684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     parameters: []\n   },\n   {\n     operation: 'isValidParentsBirthDate',\n-    parameters: [14]\n+    parameters: [14, true]\n   }\n ] satisfies Validator[]\n \n export const detailsExist = [\n"
                },
                {
                    "date": 1713973080482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     parameters: []\n   },\n   {\n     operation: 'isValidParentsBirthDate',\n-    parameters: [14, true]\n+    parameters: [14]\n   }\n ] satisfies Validator[]\n \n export const detailsExist = [\n"
                }
            ],
            "date": 1713972805348,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.\n */\nimport { Conditional } from '../types/types'\nimport { IntegratingSystemType } from '../types/types'\nimport { Validator } from '../types/validators'\n\nexport const isValidChildBirthDate = [\n  {\n    operation: 'isValidChildBirthDate'\n  }\n] satisfies Validator[]\n\nexport const hideIfNidIntegrationDisabled = [\n  {\n    action: 'hide',\n    expression: `const nationalIdSystem =\n    offlineCountryConfig &&\n    offlineCountryConfig.systems.find(s => s.integratingSystemType === '${IntegratingSystemType.Mosip}');\n    !nationalIdSystem ||\n    !nationalIdSystem.settings.openIdProviderBaseUrl ||\n    !nationalIdSystem.settings.openIdProviderClientId ||\n    !nationalIdSystem.settings.openIdProviderClaims;\n  `\n  }\n]\n\nexport const detailsExistConditional: Conditional[] = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  }\n]\n\nexport const motherNationalIDVerfication = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `values.motherNidVerification`\n  }\n]\n\nexport const fatherNationalIDVerfication = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `values.fatherNidVerification`\n  }\n]\n\nexport const mothersBirthDateConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'hide',\n    expression: 'values.exactDateOfBirthUnknown'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.mother?.fieldsModifiedByNidUserInfo?.includes('motherBirthDate')`\n  }\n]\n\nexport const parentsBirthDateValidators = [\n  {\n    operation: 'dateFormatIsCorrect',\n    parameters: []\n  },\n  {\n    operation: 'dateInPast',\n    parameters: []\n  },\n  {\n    operation: 'isValidParentsBirthDate',\n    parameters: [14]\n  }\n] satisfies Validator[]\n\nexport const detailsExist = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  }\n]\n\n// if informant is not mother or father\nexport const informantNotMotherOrFather =\n  '((values.informantType===\"MOTHER\") || (values.informantType===\"FATHER\") || (!values.informantType))'\n\nexport const hideIfInformantMotherOrFather = [\n  {\n    action: 'hide',\n    expression: informantNotMotherOrFather\n  }\n]\n\nexport const isInformantSpouse =\n  '!values.informantType || values.informantType===\"SPOUSE\"'\n\nexport const hideIfInformantSpouse = [\n  {\n    action: 'hide',\n    expression: isInformantSpouse\n  }\n]\n\nexport const mothersDetailsExistConditionals = [\n  {\n    action: 'hide',\n    expression: 'draftData?.informant?.informantType===\"MOTHER\"'\n  },\n  {\n    action: 'hideInPreview',\n    expression: 'values.detailsExist'\n  }\n]\n\nexport const spouseDetailsExistConditionals = [\n  {\n    action: 'hide',\n    expression: 'draftData?.informant?.informantType===\"SPOUSE\"'\n  },\n  {\n    action: 'hideInPreview',\n    expression: 'values.detailsExist'\n  }\n]\n\nexport const fathersDetailsExistConditionals = [\n  {\n    action: 'hide',\n    expression: 'draftData?.informant?.informantType===\"FATHER\"'\n  },\n  {\n    action: 'hideInPreview',\n    expression: 'values.detailsExist'\n  }\n]\n\nexport const fathersBirthDateConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'hide',\n    expression: 'values.exactDateOfBirthUnknown'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.father?.fieldsModifiedByNidUserInfo?.includes('fatherBirthDate')`\n  }\n]\nexport const motherFirstNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.mother?.fieldsModifiedByNidUserInfo?.includes('firstNamesEng')`\n  }\n]\n\nexport const motherMiddleNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.mother?.fieldsModifiedByNidUserInfo?.includes('middleNamesEng')`\n  }\n]\n\nexport const motherFamilyNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.mother?.fieldsModifiedByNidUserInfo?.includes('familyNameEng')`\n  }\n]\nexport const fatherFirstNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.father?.fieldsModifiedByNidUserInfo?.includes('firstNamesEng')`\n  }\n]\n\nexport const fatherMiddleNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.father?.fieldsModifiedByNidUserInfo?.includes('middleNamesEng')`\n  }\n]\n\nexport const fatherFamilyNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.father?.fieldsModifiedByNidUserInfo?.includes('familyNameEng')`\n  }\n]\n\nexport const hideIfInformantBrideOrGroom: Conditional[] = [\n  {\n    action: 'hide',\n    expression:\n      '(!values.informantType || values.informantType === \"BRIDE\" || values.informantType === \"GROOM\")'\n  }\n]\n\nexport const getInformantConditionalForMarriageDocUpload: Conditional[] = [\n  {\n    action: 'hide',\n    expression:\n      \"(draftData && draftData.informant && draftData.informant.informantType && (draftData.informant.informantType === 'BRIDE' || draftData.informant.informantType === 'GROOM' ))\"\n  }\n]\n\nexport const brideOrGroomBirthDateValidators = (spouseType: string) => [\n  {\n    operation: 'dateFormatIsCorrect',\n    parameters: []\n  },\n  {\n    operation: 'dateInPast',\n    parameters: []\n  },\n  {\n    operation: 'isValidDateOfBirthForMarriage',\n    parameters: [spouseType, 18]\n  }\n]\n\nexport const brideOrGroomAgeValidators = [\n  {\n    operation: 'range',\n    parameters: [18, 120]\n  },\n  {\n    operation: 'maxLength',\n    parameters: [3]\n  }\n] satisfies Validator[]\n\nexport const ageOfIndividualValidators: Validator[] = [\n  {\n    operation: 'range',\n    parameters: [14, 120]\n  },\n  {\n    operation: 'maxLength',\n    parameters: [3]\n  }\n]\n\nexport const ageOfParentsConditionals = [\n  ...ageOfIndividualValidators,\n  {\n    operation: 'isValidParentsBirthDate',\n    parameters: [10, true]\n  }\n] satisfies Validator[]\n\nexport const ageOfDeceasedConditionals = [\n  {\n    operation: 'range',\n    parameters: [0, 120]\n  },\n  {\n    operation: 'maxLength',\n    parameters: [3]\n  }\n] satisfies Validator[]\n\nexport const exactDateOfBirthUnknownConditional = [\n  {\n    action: 'hide',\n    expression: '!values.exactDateOfBirthUnknown'\n  }\n]\n\nexport const isValidBirthDate = [\n  {\n    operation: 'isValidBirthDate'\n  }\n] satisfies Validator[]\n\nexport function getNationalIDValidators(configCase: string): Validator[] {\n  if (configCase === 'father') {\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['mother.iD']\n      }\n    ]\n  } else if (configCase === 'mother') {\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['father.iD']\n      }\n    ]\n  } else if (configCase === 'deceased') {\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['informant.informantID']\n      }\n    ]\n  } else if (configCase === 'groom') {\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['bride.iD']\n      }\n    ]\n  } else if (configCase === 'bride') {\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['groom.iD']\n      }\n    ]\n  } else {\n    // informant id\n    return [\n      {\n        operation: 'validIDNumber',\n        parameters: ['NATIONAL_ID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['deceased.deceasedID']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['mother.iD']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['father.iD']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['groom.iD']\n      },\n      {\n        operation: 'duplicateIDNumber',\n        parameters: ['bride.iD']\n      }\n    ]\n  }\n}\n\nexport const hideIfNidIntegrationEnabled = [\n  {\n    action: 'hide',\n    expression: `const nationalIdSystem =\n          offlineCountryConfig &&\n          offlineCountryConfig.systems.find(s => s.integratingSystemType === '${IntegratingSystemType.Mosip}');\n          nationalIdSystem &&\n          nationalIdSystem.settings.openIdProviderBaseUrl &&\n          nationalIdSystem.settings.openIdProhideIfNidIntegrationDisabledviderClientId &&\n          nationalIdSystem.settings.openIdProviderClaims;\n      `\n  }\n]\n\nexport const informantBirthDateConditionals = [\n  {\n    action: 'hide',\n    expression: 'values.exactDateOfBirthUnknown'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.informant?.fieldsModifiedByNidUserInfo?.includes('informantBirthDate')`\n  }\n]\n\nexport const spouseBirthDateConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'hide',\n    expression: 'values.exactDateOfBirthUnknown'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.spouse?.fieldsModifiedByNidUserInfo?.includes('spouseBirthDate')`\n  }\n]\n\nexport const informantFirstNameConditionals = [\n  {\n    action: 'disable',\n    expression: `draftData?.informant?.fieldsModifiedByNidUserInfo?.includes('firstNamesEng')`\n  }\n]\n\nexport const informantFamilyNameConditionals = [\n  {\n    action: 'disable',\n    expression: `draftData?.informant?.fieldsModifiedByNidUserInfo?.includes('familyNameEng')`\n  }\n]\n\nexport const informantMiddleNameConditionals = [\n  {\n    action: 'disable',\n    expression: `draftData?.informant?.fieldsModifiedByNidUserInfo?.includes('middleNamesEng')`\n  }\n]\nexport const spouseFirstNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.spouse?.fieldsModifiedByNidUserInfo?.includes('firstNamesEng')`\n  }\n]\n\nexport const spouseFamilyNameConditionals = [\n  {\n    action: 'hide',\n    expression: '!values.detailsExist'\n  },\n  {\n    action: 'disable',\n    expression: `draftData?.spouse?.fieldsModifiedByNidUserInfo?.includes('familyNameEng')`\n  }\n]\n\nexport const FATHER_DETAILS_DONT_EXIST =\n  '(draftData?.father && !draftData?.father.detailsExist) || !values.detailsExist'\nexport const MOTHER_DETAILS_DONT_EXIST =\n  '(draftData?.mother && !draftData?.mother.detailsExist) || !values.detailsExist'\nexport const SPOUSE_DETAILS_DONT_EXIST =\n  '(draftData?.spouse && !draftData?.spouse.detailsExist) || !values.detailsExist'\n\n// if mothers details do not exist on other page\nexport const mothersDetailsDontExistOnOtherPage =\n  'draftData && draftData.mother && !draftData.mother.detailsExist'\n\n// if fathers details do not exist\nexport const detailsDontExist = '!values.detailsExist'\n\n// primary address same as other primary\nexport const primaryAddressSameAsOtherPrimaryAddress =\n  'values.primaryAddressSameAsOtherPrimary'\n"
        }
    ]
}